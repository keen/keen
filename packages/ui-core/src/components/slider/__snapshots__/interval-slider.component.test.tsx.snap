// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@keen.io/ui-core - <RangeSlider /> should set initial value 1`] = `
.c2 {
  box-sizing: border-box;
  width: 15px;
  height: 15px;
  border-radius: 50%;
  background: #FFFFFF;
  border: solid 2px #F0AB30;
}

.c0 {
  border-radius: 3px;
  background: #E1E2E4;
}

.c1 {
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
}

.c3 {
  position: absolute;
  top: 0;
  left: 0;
  -webkit-transform: translateX(-50%) translateX(7.5px) translateY(-50%) translateY( 23px );
  -ms-transform: translateX(-50%) translateX(7.5px) translateY(-50%) translateY( 23px );
  transform: translateX(-50%) translateX(7.5px) translateY(-50%) translateY( 23px );
}

<Component
  colors={
    Array [
      "blue",
      "red",
    ]
  }
  initialValue={50}
  intervals={
    Array [
      Object {
        "maximum": 100,
        "minimum": 0,
        "step": 1,
      },
    ]
  }
  maximum={0}
  minimum={0}
>
  <div
    onClick={[Function]}
    style={
      Object {
        "cursor": "pointer",
        "height": "15px",
        "position": "relative",
      }
    }
  >
    <Rail
      borderRadius={3}
      colors={
        Array [
          "blue",
          "red",
        ]
      }
      size={4}
      type="horizontal"
    >
      <div
        style={
          Object {
            "background": "linear-gradient(90deg, blue, red",
            "borderRadius": 3,
            "height": "4px",
            "position": "absolute",
            "top": "50%",
            "transform": "translateY(-50%)",
            "width": "100%",
          }
        }
      />
    </Rail>
    <OffRange
      borderRadius={3}
      styles={
        Object {
          "height": "4px",
          "left": "0px",
          "position": "absolute",
          "top": "50%",
          "transform": "translateY(-50%)",
          "width": "calc(100% - 0px)",
        }
      }
    >
      <styled.div
        borderRadius={3}
        style={
          Object {
            "height": "4px",
            "left": "0px",
            "position": "absolute",
            "top": "50%",
            "transform": "translateY(-50%)",
            "width": "calc(100% - 0px)",
          }
        }
      >
        <div
          className="c0"
          style={
            Object {
              "height": "4px",
              "left": "0px",
              "position": "absolute",
              "top": "50%",
              "transform": "translateY(-50%)",
              "width": "calc(100% - 0px)",
            }
          }
        />
      </styled.div>
    </OffRange>
    <Component
      controlStyles={
        Object {
          "x": 0,
        }
      }
      dragConstraints={
        Object {
          "bottom": 0,
          "left": 0,
          "right": 0,
          "top": 0,
        }
      }
      dragDirection="x"
      onDrag={[Function]}
      onDragEnd={[Function]}
      onDragStart={[Function]}
    >
      <ForwardRef(MotionComponent)
        drag="x"
        dragConstraints={
          Object {
            "bottom": 0,
            "left": 0,
            "right": 0,
            "top": 0,
          }
        }
        dragElastic={0}
        dragMomentum={false}
        onDrag={[Function]}
        onDragEnd={[Function]}
        onDragStart={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "display": "block",
            "position": "absolute",
            "x": 0,
            "zIndex": 1,
          }
        }
      >
        <div
          draggable={false}
          onMouseDown={[Function]}
          onTouchStart={[Function]}
          style={
            Object {
              "display": "block",
              "position": "absolute",
              "transform": "none",
              "userSelect": "none",
              "zIndex": 1,
            }
          }
        >
          <styled.div
            dragDirection="x"
          >
            <div
              className="c1"
            >
              <Mark
                backgroundColor="#FFFFFF"
                borderColor="#F0AB30"
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                size={15}
              >
                <styled.div
                  backgroundColor="#FFFFFF"
                  borderColor="#F0AB30"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  size={15}
                >
                  <div
                    className="c2"
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    size={15}
                  />
                </styled.div>
              </Mark>
              <TooltipPosition
                containerSize={15}
                position="bottom"
                visible={false}
                x={0}
                y={0}
              >
                <styled.div
                  containerSize={15}
                  height={0}
                  position="bottom"
                  width={0}
                >
                  <div
                    className="c3"
                    height={0}
                    width={0}
                  >
                    <AnimatePresence />
                  </div>
                </styled.div>
              </TooltipPosition>
            </div>
          </styled.div>
        </div>
        <Memo(MountComponent)
          innerRef={
            Object {
              "current": .c1 {
  box-sizing: border-box;
  width: 15px;
  height: 15px;
  border-radius: 50%;
  background: #FFFFFF;
  border: solid 2px #F0AB30;
}

.c0 {
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
}

.c2 {
  position: absolute;
  top: 0;
  left: 0;
  -webkit-transform: translateX(-50%) translateX(7.5px) translateY(-50%) translateY( 23px );
  -ms-transform: translateX(-50%) translateX(7.5px) translateY(-50%) translateY( 23px );
  transform: translateX(-50%) translateX(7.5px) translateY(-50%) translateY( 23px );
}

<div
                draggable="false"
                style="display: block; position: absolute; z-index: 1; transform: none; user-select: none;"
              >
                <div
                  class="c0"
                >
                  <div
                    class="c1"
                    size="15"
                  />
                  <div
                    class="c2"
                    height="0"
                    width="0"
                  />
                </div>
              </div>,
            }
          }
          isStatic={false}
          values={
            MotionValuesMap {
              "hasMounted": true,
              "onUpdate": undefined,
              "output": [Function],
              "unsubscribers": Map {
                "x" => [Function],
              },
              "values": Map {
                "x" => MotionValue {
                  "canTrackVelocity": true,
                  "current": 0,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": 0,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
              },
            }
          }
        />
        <Component
          controls={
            ValueAnimationControls {
              "activeOverrides": Set {},
              "baseTarget": Object {
                "x": 0,
              },
              "hasValue": [Function],
              "isAnimating": Set {},
              "makeTargetAnimatable": [Function],
              "overrides": Array [],
              "props": Object {
                "children": <styled.div
                  dragDirection="x"
                >
                  <React.Fragment>
                    <Mark
                      backgroundColor="#FFFFFF"
                      borderColor="#F0AB30"
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      size={15}
                    />
                    <TooltipPosition
                      containerSize={15}
                      position="bottom"
                      visible={false}
                      x={0}
                      y={0}
                    >
                      <AnimatePresence />
                    </TooltipPosition>
                  </React.Fragment>
                </styled.div>,
                "drag": "x",
                "dragConstraints": Object {
                  "bottom": 0,
                  "left": 0,
                  "right": 0,
                  "top": 0,
                },
                "dragElastic": 0,
                "dragMomentum": false,
                "onDrag": [Function],
                "onDragEnd": [Function],
                "onDragStart": [Function],
                "onMouseDown": [Function],
                "onTouchStart": [Function],
                "style": Object {
                  "display": "block",
                  "position": "absolute",
                  "x": 0,
                  "zIndex": 1,
                },
              },
              "readValueFromSource": [Function],
              "resolvedOverrides": Array [],
              "values": MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "x" => [Function],
                },
                "values": Map {
                  "x" => MotionValue {
                    "canTrackVelocity": true,
                    "current": 0,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": 0,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              },
              "variants": Object {},
            }
          }
          drag="x"
          dragConstraints={
            Object {
              "bottom": 0,
              "left": 0,
              "right": 0,
              "top": 0,
            }
          }
          dragElastic={0}
          dragMomentum={false}
          innerRef={
            Object {
              "current": <div
                draggable="false"
                style="display: block; position: absolute; z-index: 1; transform: none; user-select: none;"
              >
                <div
                  class="c1"
                >
                  <div
                    class="c2"
                    size="15"
                  />
                  <div
                    class="c3"
                    height="0"
                    width="0"
                  />
                </div>
              </div>,
            }
          }
          key="drag"
          onDrag={[Function]}
          onDragEnd={[Function]}
          onDragStart={[Function]}
          onMouseDown={[Function]}
          onTouchStart={[Function]}
          parentContext={
            Object {
              "static": false,
            }
          }
          style={
            Object {
              "display": "block",
              "position": "absolute",
              "x": 0,
              "zIndex": 1,
            }
          }
          values={
            MotionValuesMap {
              "hasMounted": true,
              "onUpdate": undefined,
              "output": [Function],
              "unsubscribers": Map {
                "x" => [Function],
              },
              "values": Map {
                "x" => MotionValue {
                  "canTrackVelocity": true,
                  "current": 0,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": 0,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
              },
            }
          }
        />
      </ForwardRef(MotionComponent)>
    </Component>
  </div>
</Component>
`;
